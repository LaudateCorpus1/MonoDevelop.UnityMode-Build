use File::Path;
use File::Basename qw(dirname basename fileparse);

my $documentation = <<'END_MESSAGE';
#we write a long description of the entire process and challenges in here
END_MESSAGE

my $scriptDir = File::Spec->rel2abs( dirname($0) );

my $mf = "$scriptDir/template.app/Contents/Frameworks/Mono.framework";

rmtree($mf);

system("mkdir $mf");
system("mkdir $mf/Versions");
my $current = "$mf/Versions/Current";
system("mkdir $current");

die "Cannot find monoframework to copy" if (not -d "/Library/Frameworks/Mono.framework2");

system("cp -r /Library/Frameworks/Mono.framework2/Versions/3.6.0/* $current");
#rmtree("$current/lib/mono/gac");
#rmtree("$current/lib/mono/xbuild-frameworks");
rmtree("$current/lib/mono/monodroid");
rmtree("$current/lib/mono/monotouch");
rmtree("$current/lib/ironruby");
rmtree("$current/lib/ironpython");
rmtree("$current/lib/mono/boo");
rmtree("$current/lib/mono/Reference Assemblies");
rmtree("$current/lib/monodoc");
rmtree("$current/include");
rmtree("$current/share/xml");
rmtree("$current/share/autoconf");
rmtree("$current/share/automake-1.13");
rmtree("$current/share/libtool");
rmtree("$current/share/man");
#rmtree("$current/etc/xml");
rmtree("$current/lib/mono/xbuild");
rmtree("$current/lib/mono/Microsoft SDKs");
rmtree("$current/lib/mono/Microsoft F#");

#system("rm $current/lib/*.a");
#system("rm -r $current/lib/*.dSYM");
#system("rm -r $current/lib/*llvm.dylib");
#system("rm -r $current/lib/*llvm.0.dylib");
#system("rm -r $current/bin/*.dSYM");
system("rm -r $current/lib/mono/4.5/FSharp.*");
system("rm -r $current/lib/mono/4.0/FSharp.*");
system("rm -r $current/lib/mono/portable-*");
#system("rm -r $current/lib/libLTO.dylib");
#system("find $current/bin ! -name mono -type f -delete");
#system("rm $current/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache");
#system("rm $current/lib/gtk-2.0/2.10.0/immodules.cache");

mkpath("$current/etc/pango");
my $filename = "$current/etc/pango/pangorc";
open(my $fh, '>', $filename) or die "Could not open file '$filename' $!";
print $fh "[Pango]\n";
print $fh "ModuleFiles = /Library/Frameworks/Mono.framework/Versions/3.6.0/etc/pango/pango.modules\n";
close $fh;

chdir($current);
my @array = `grep -RIl /Library/Frameworks/Mono *`;

my $relocatescript = <<"END_MESSAGE";
#!/bin/sh

#This is an autogenerated file, generated by update_mono_framework.pl.
$documentation
END_MESSAGE

$relocatescript .= <<'END_MESSAGE';

MONO_FRAMEWORK_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$MONO_FRAMEWORK_PATH"

export DYLD_FALLBACK_LIBRARY_PATH=$MONO_FRAMEWORK_PATH/lib:/lib:/usr/lib
export MONO_GAC_PREFIX=$MONO_FRAMEWORK_PATH
export MONO_PATH=$MONO_FRAMEWORK_PATH/lib/mono:$MONO_FRAMEWORK_PATH/lib/gtk-sharp-2.0
export MONO_CONFIG=$MONO_FRAMEWORK_PATH/etc/mono/config
export MONO_CFG_DIR=$MONO_FRAMEWORK_PATH/etc
export XDG_DATA_HOME=$MONO_FRAMEWORK_PATH/share
export GDK_PIXBUF_MODULE_FILE=$MONO_FRAMEWORK_PATH/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache
export GDK_PIXBUF_MODULEDIR=$MONO_FRAMEWORK_PATH/lib/gtk-2.0/2.10.0/loaders
export GTK_DATA_PREFIX=$MONO_FRAMEWORK_PATH
export GTK_EXE_PREFIX=$MONO_FRAMEWORK_PATH
export GTK_PATH=$MONO_FRAMEWORK_PATH/lib/gtk-2.0:$MONO_FRAMEWORK_PATH/lib/gtk-2.0/2.10.0
export GTK2_RC_FILES=$MONO_FRAMEWORK_PATH/etc/gtk-2.0/gtkrc
export PKG_CONFIG_PATH="$MONO_FRAMEWORK_PATH/lib/pkgconfig:$MONO_FRAMEWORK_PATH/share/pkgconfig:$PKG_CONFIG_PATH"
export PANGO_RC_FILE=$TMPDIR/unity-monodevelop-monoframework/etc/pango/pangorc
END_MESSAGE

foreach $line (@array)
{
	chomp($line);
	#next if ($line =~ /pangorc$/);
	system("cp $line $line.in");

	next if ($line =~ /pango.modules$/);
	$relocatescript .= "sed \"s,/Library/Frameworks/Mono.framework/Versions/3.6.0,\$MONO_FRAMEWORK_PATH,g\" \"$line.in\" > \"$line\"\n";
}

$relocatescript .= "sed \"s,/Library/Frameworks/Mono.framework/Versions/3.6.0,\${TMPDIR}/unity-monodevelop-monoframework,g\" \"etc/pango/pango.modules.in\" > \"etc/pango/pango.modules\"\n";
$relocatescript .= "ln -sf \"\$MONO_FRAMEWORK_PATH\" \${TMPDIR}/unity-monodevelop-monoframework\n";

my $filename = "$current/relocate_mono.sh";
open(my $fh, '>', $filename) or die "Could not open file '$filename' $!";
print $fh $relocatescript;
close $fh;

print $relocatescript;